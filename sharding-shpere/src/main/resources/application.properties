## shardingjdbc分片策略
## 配置数据源，名字自定义 m1
#spring.shardingsphere.datasource.names=m1,m2,m0
#
## 一个实体有两张表，需要进行覆盖
#spring.main.allow-bean-definition-overriding=true
#
## 配置第 1 个数据源：连接池、驱动、地址、用户名、密码
#spring.shardingsphere.datasource.m1.type=org.apache.commons.dbcp2.BasicDataSource
#spring.shardingsphere.datasource.m1.driver-class-name=com.mysql.jdbc.Driver
#spring.shardingsphere.datasource.m1.url=jdbc:mysql://localhost:3306/course_db1?useUnicode=true&characterEncoding=utf-8&useSSL=false
#spring.shardingsphere.datasource.m1.username=root
#spring.shardingsphere.datasource.m1.password=root123456
#
## 配置第 2 个数据源：连接池、驱动、地址、用户名、密码
#spring.shardingsphere.datasource.m2.type=org.apache.commons.dbcp2.BasicDataSource
#spring.shardingsphere.datasource.m2.driver-class-name=com.mysql.jdbc.Driver
#spring.shardingsphere.datasource.m2.url=jdbc:mysql://localhost:3306/course_db2?useUnicode=true&characterEncoding=utf-8&useSSL=false
#spring.shardingsphere.datasource.m2.username=root
#spring.shardingsphere.datasource.m2.password=root123456
#
## 配置第 3 个数据源：连接池、驱动、地址、用户名、密码
#spring.shardingsphere.datasource.m0.type=org.apache.commons.dbcp2.BasicDataSource
#spring.shardingsphere.datasource.m0.driver-class-name=com.mysql.jdbc.Driver
#spring.shardingsphere.datasource.m0.url=jdbc:mysql://localhost:3306/deng?useUnicode=true&characterEncoding=utf-8&useSSL=false
#spring.shardingsphere.datasource.m0.username=root
#spring.shardingsphere.datasource.m0.password=root123456
#
## 配置t_order表规则：配置course表分布情况，配置表在哪个数据库里面，表名是什么
### 这里不分库，只分表
##spring.shardingsphere.sharding.tables.course.actual-data-nodes=m1.course_$->{1..2}
#
### 这里分库分表
#spring.shardingsphere.sharding.tables.course.actual-data-nodes=m$->{1..2}.course_$->{1..2}
#
## 指定course表里面主键生成策略
#spring.shardingsphere.sharding.tables.course.key-generator.column=id
#spring.shardingsphere.sharding.tables.course.key-generator.type=SNOWFLAKE
#
## 配置分片算法
### （不分库时不配置）配置库的分片策略：userId为偶数时添加到course_db1库，如果userId值为奇数添加到course_db2表中
### default-database-strategy 表示所有库都是这样
### spring.shardingsphere.sharding.default-database-strategy.inline.sharding-column=user_id
### spring.shardingsphere.sharding.default-database-strategy.inline.algorithm-expression=m$->{user_id % 2 + 1}
#
### 这里只指定course库是策略
#spring.shardingsphere.sharding.tables.course.database-strategy.inline.sharding-column=user_id
#spring.shardingsphere.sharding.tables.course.database-strategy.inline.algorithm-expression=m$->{user_id % 2 + 1}
#
### 配置表的分片策略：id值为偶数时添加到course_1表，如果id值为奇数添加到course_2表中
#spring.shardingsphere.sharding.tables.course.table-strategy.inline.sharding-column=id
#spring.shardingsphere.sharding.tables.course.table-strategy.inline.algorithm-expression=course_$->{id % 2 + 1}
#
## 配置公共表
#spring.shardingsphere.sharding.broadcast-tables=t_udict
#spring.shardingsphere.sharding.tables.t_udict.key-generator.column=id
#spring.shardingsphere.sharding.tables.t_udict.key-generator.type=SNOWFLAKE
#
#
## 打开sql输入日志
#spring.shardingsphere.props.sql.show = true
